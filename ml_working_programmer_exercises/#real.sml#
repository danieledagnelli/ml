signature ARITH =
  sig
    type t
    val zero : t
    val sum : t*t->t
    val diff : t*t->t
    val prod : t*t->t
    val quo : t*t->t
  end;


structure Real : ARITH =
  struct
    type t = real*real;
    val zero = (0.0, 1.0);
    fun sum ((x, y), (x', y')) = (x+x', y+y'): t;
    fun diff ((x, y), (x', y')) = (x-x', y-y'): t;
    fun prod ((x, y), (x', y')) = (x*x' - y*y', x*y' + x'*y): t;
    fun recip (x, y) = 
                      let val t = x*x + y+y
                      in (x/t, ~y/t) end;
    fun quo (z, z') = prod (z, recip z');

  end;
>fun power (x, k): real = 
  if k=1 then x
  else if k mod 2 = 0 then power (x*x, k div 2)
                      else x * power (x*x, k div 2);
